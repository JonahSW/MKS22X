board: int 2D array
0 represents unoccupied, unthreatened space. -1 represents a queen, and int higher represents the number of queens threatening the position

//checks if the current board position is a valid solution
public boolean checkQueen(int[][] board){
	//returns true if the current board position is a valid function
}

//adds a queen to the board
public void addQueen(r, c){
	//cycles through the array from the bottom left corner and places the queen at the first available location
}

//removes a queen from the board
public void removequeen(r, c){
       //removes a queen from the board and removes one level of threat from each square the queen threatened
}

//places the queen in a valid location
public void placeQueen(c){
       //cycles through a column and places the queen in a valid location, then calls itself on the next column over.

       //if a queen cannot be added to a column and there are still columns to go, backtracks one step, removes the queen from the location in the previous column and places the queen at the next available location in that column
}

//finds a good solution for the board
public boolean void solve(){
       //uses the placeQueen method as a helper to find a good solution, and then return true when it finds one and updates teh board
}

//finds all valid solutions for the given board
public int countSolutions(){
       //calls placeQueens the number of times there are permutations of the board, and counts all of the solutions it finds

       //runs a version of the solveH function called solutionCountH that increments an integer whenever it finds a solution, instead of just ending.

}

//
toStringInt(){
	//prints out the int array
}

//
toString(){
	//prints out a char array that shows the queens and the locations they threaten
}

/*
public void recurQueen: places queens at the first available spaces until it has placed n queens or cannot place any more queens, recursively backtracking if it cant place a queen and placing it in a different location

public int solutionCount: runs recurQueen to find a solution (must divide by 4), keeps a counter to track every time recurqueen comes up with a solution. Recurqueen is modified so that it only ends when it has tried every possible orientation for queens on the board (n! for board size n)
*/
